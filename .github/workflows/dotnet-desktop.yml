# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: "RunatRate Managment.sln"          
      Wap_Project_Directory: "RunatRateManagment.Package"
      Wap_Project_Path: RunatRateManagment.Package\RunatRateManagment.Package.wapproj
      DOTNET_ROOT: C:\Program Files\dotnet

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Restore NuGet packages using dotnet restore (reliable for .NET Core)
    - name: Restore solution
      run: dotnet restore "$env:Solution_Name"

    # Build the solution
    - name: Build solution
      run: dotnet build "$env:Solution_Name" --configuration ${{ matrix.configuration }} --no-restore

    # Run unit tests
    - name: Run unit tests
      run: dotnet test "$env:Solution_Name" --configuration ${{ matrix.configuration }} --no-build

    # Decode the PFX certificate
    - name: Decode signing certificate
      run: |
        $pfx_bytes = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $pfx_path = Join-Path -Path $env:Wap_Project_Directory -ChildPath "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes($pfx_path, $pfx_bytes)

    # Build and package the WAP project
    - name: Create app package
      run: msbuild "$env:Wap_Project_Path" `
            /p:Configuration=${{ matrix.configuration }} `
            /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode `
            /p:AppxBundle=$env:Appx_Bundle `
            /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
            /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload

    # Remove the temporary PFX file
    - name: Remove signing certificate
      run: Remove-Item -Path "$env:Wap_Project_Directory\GitHubActionsWorkflow.pfx"

    # Upload the MSIX package
    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
